
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 28, 2020 07:14:24 PM +0200  platform: Windows NT
from threading import *
import sys
from socket import *
from time import sleep

"""
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
"""



try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from queue import Queue

conn_q = Queue()
gui_q  = Queue()

def client_recv(my_socket):
    while True:
        data = my_socket.recv(1024)
        if data=="":
            print("server close this socket")
            my_socket.close()
            break #get out from thread
        data = data.decode('latin-1')
        print ("client_recv:" + data )
        print("4444",current_thread().name)
        gui_q.put(data)

def client_send():
    print("start client")
    my_socket = socket()
    my_socket.connect(("127.0.0.1",8820))
    #my_socket.connect(("10.0.0.31",8820))

    recvThread = Thread(target=client_recv, args=(my_socket,))
    recvThread.start()

    while True:
        if conn_q.empty() == False:
            data = conn_q.get()
            print ("client_send:" + data )
            print("3333",current_thread().name)
            my_socket.sendall(data.encode('latin-1'))
        sleep(0.05) #sleep a little before check the queue again


def send_message(p1):
    global w
    print('gui_chat_support.send_message')
    print("111")
    src = w.Entry1
    s = src.get()
    #to = w.Scrolledtext1
    #to.insert(END,s)
    conn_q.put(s)
    #sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    commThread = Thread(target= client_send, args=())
    commThread.start()
    top.after(100, on_after_elapsed)

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

def on_after_elapsed():
    """
    while True:
        try:
            v = dataQ.get(timeout=0.1)
        except:
            break
        scrText.insert(TkConst.END, "value=%d\n" % v)
        scrText.see(TkConst.END)
        scrText.update()
    """    
    global w, top_level
    #print('gui_chat_support.send_message')
    #print("111")
    if gui_q.empty() == False:
            text = gui_q.get()
            to = w.Scrolledtext1
            to = w.Scrolledtext1
            to.insert(END,text)
    top_level.after(1000, on_after_elapsed)


if __name__ == '__main__':
    import gui_chat
    gui_chat.vp_start_gui()




